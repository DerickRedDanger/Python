from sortedcontainers import SortedList


def solution(intervals, queries):
    sorted_list_lists = SortedList(intervals)
    result = []
    for q, start, end in queries:
        if q == 0:
            idx_l = sorted_list_lists.bisect_left([start, 0]) -1  # position of the first element smaller then start
            idx_r = sorted_list_lists.bisect_right([end, 0])  # position of the last element smaller then end
            idx_l = 0 if idx_l < 0 else idx_l
            
            intersect = False
            for start_i, end_i in sorted_list_lists[idx_l: idx_r + 1]:
                if (start_i <= start <= end_i) or (start_i <= end <= end_i) or (start <= start_i <= end) or (start <= end_i <= end):
                    intersect = True
                    break
            result.append(intersect)
            
        elif q == 1:
            sorted_list_lists.discard([start, end])
            result.append(len(sorted_list_lists))
            
    return result

intervals = [[-26367, 21713], [78364, 83654], [47452, 59227], [-83978, -34722], [74215, 79227], [1812, 65107], [-31597, 41895], [8636, 82430], [67919, 95584], [-44569, 37990], [79819, 99497], [28331, 55617], [-18128, 72897], [61814, 78044], [2440, 4423], [32765, 61916], [42496, 50186], [16490, 33361], [-26304, 9388], [-62841, -3270], [-41330, 76055], [-43214, 68229], [-52601, -32695], [-26387, 64343], [61192, 86796], [-75595, 23210], [-3826, 1139], [-7564, 44389], [-18247, 89663], [28995, 29185], [60554, 96221], [-10587, 99261], [-87316, 4111], [-40934, 60964], [62138, 92657], [-14583, 47602], [25061, 90809], [74122, 83820], [10659, 69965], [90119, 94561], [83797, 90504], [44430, 76428], [83907, 92696], [79148, 97120], [-22021, 57582], [-22629, -8797], [2774, 48966], [-5778, 95115], [24459, 52959], [20593, 25164], [22240, 90392], [49717, 99051], [-89765, 86778], [-29899, 11738], [76429, 79453], [28674, 61144], [-54707, 95606], [-93222, -6289], [-39862, 24936], [-68719, 40602], [93969, 99437], [-12293, -273], [-47586, 91070], [63875, 65188], [-1244, 1440], [69510, 97699], [-82435, -77785], [47266, 57577], [-5025, 77779], [52664, 67737], [-3504, 23360], [15136, 58349], [-96109, -3254], [-69406, -3392], [-44483, 81638], [95414, 99689], [13761, 24815], [-75733, 82493], [23789, 49062], [-31364, -28487], [90111, 97485], [84890, 94093], [19548, 36761], [-2563, 13012], [-28270, 67066], [82810, 97972], [81659, 90563], [74911, 99170], [-79638, 660], [-9735, 81792], [-4051, 42956], [60991, 86725], [9343, 26954], [-63627, 14407], [-77607, 58896], [3530, 41372], [-53699, 57154], [89860, 92305], [-86482, 62405], [3950, 26476]]
queries = [[1, 24346, 31750], [1, 51586, 90208], [1, -48559, -16370], [1, -80819, -7158], [1, -48430, -38145], [0, 48225, 76098], [0, -15195, 61978], [0, -29592, 35736], [0, 10839, 13638], [1, 4904, 45807], [0, -72194, 20682], [0, -77519, -2976], [1, 57855, 97508], [1, -93765, -6822], [0, 38395, 99020], [1, 26485, 89491], [0, -52514, -30394], [0, -18039, 73437], [1, 54803, 85264], [1, -3337, 89381], [0, 24593, 58157], [1, -15746, 76754], [0, 22027, 97689], [0, 87517, 99136], [1, 27323, 74596], [1, 79949, 83215], [0, -86627, 58518], [1, 36374, 81323], [0, -88534, -83587], [0, -26601, 32208], [1, -32144, 98254], [1, 96142, 99093], [1, -69053, -10460], [1, 76378, 94577], [1, -71977, 85776], [0, 11363, 13735], [0, 62300, 86585], [0, -45615, 85151], [1, -35946, 1742], [0, -72249, -8921], [1, -39201, -27632], [0, 2384, 33927], [1, -58081, 41155], [0, -84503, -52209], [1, -16312, 48507], [1, 32146, 69368], [1, 10916, 61151], [0, -91572, 33153], [1, -1494, 69796], [0, -57810, 42540], [1, -82162, 97840], [1, 42021, 90865], [1, 53837, 76334], [1, 89406, 93724], [0, -79250, -14431], [1, -89195, -12095], [0, -29859, 61835], [1, 64418, 71446], [1, -26329, 82612], [1, -17776, -8271], [1, 39839, 40210], [1, -37782, 79674], [0, -69154, -62532], [1, -98863, -62318], [1, 84878, 86019], [1, 50205, 60408], [0, -66090, 80832], [1, -71627, 77520], [0, -58640, -41434], [1, 73576, 88328], [0, -40735, 27003], [0, 98319, 99392], [1, 2198, 95674], [1, -72786, 49384], [0, -35446, 33117], [0, 49204, 51766], [0, -96886, -58886], [0, 83088, 88894], [0, -51510, 50906], [0, 50389, 73661], [0, 66835, 96865], [0, -50458, -28842], [1, -10838, 63994], [0, -15068, 40322], [1, -85925, 91575], [1, 91001, 96842], [0, -40363, -27465], [1, -88369, -62828], [1, -42822, -9279], [1, -25852, -18653], [1, 64857, 86686], [1, 57873, 82545], [0, 15229, 33685], [0, -52303, 47221], [0, 34600, 37849], [1, -5078, 89016], [0, 42398, 76359], [0, 42843, 58335], [0, 85659, 98780], [0, -39330, 69874]]
expected_result = [100, 100, 100, 100, 100, True, True, True, True, 100, True, True, 100, 100, True, 100, True, True, 100, 100, True, 100, True, True, 100, 100, True, 100, True, True, 100, 100, 100, 100, 100, True, True, True, 100, True, 100, True, 100, True, 100, 100, 100, True, 100, True, 100, 100, 100, 100, True, 100, True, 100, 100, 100, 100, 100, True, 100, 100, 100, True, 100, True, 100, True, True, 100, 100, True, True, True, True, True, True, True, True, 100, True, 100, 100, True, 100, 100, 100, 100, 100, True, True, True, 100, True, True, True, True]

result = solution(intervals, queries)
print(result)
print(expected_result)
correct = True if result == expected_result else False
print(correct)